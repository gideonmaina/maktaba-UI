---
import BaseHTML from '../../../layouts/BaseHTML.astro';
import HeadTag from '../../../components/HeadTag.astro';
import Main from "../../../layouts/Main.astro"
export const getStaticPaths = async () => {
  //  console.log(url)
  // let routes=[];
  let paths = [];

  try {
    const url = new URL(`${import.meta.env.STRAPI_URL}/api/languages`);
    const response = await fetch(url.toString());
    const result = await response.json();
    const languages = result.data;

    for (const obj of languages) {
      const language = obj.attributes.slug
        ? obj.attributes.slug
        : obj.attributes.Language;

      const url = new URL(`${import.meta.env.STRAPI_URL}/api/${language}s`);
      const response = await fetch(url.toString());
      const result = await response.json();
      
      if(result.data) {
        const words = result.data;
        //console.log(words)
        for await (const obj of words) {
          // wait for loop to finish
          // console.error("Word object")
          //  console.log(obj)
          if(obj.attributes) {
            const endpoint = {
              params: { language: "", word: "" },
            };
            const word = obj.attributes.word;
            // console.log(word)
            endpoint.params.language = language;
            endpoint.params.word = word;
            //console.log(endpoint)
            paths.push({ ...endpoint });
          }
        }
      }
    }
  } catch (error) {
    console.log(error.message);
  }
  //console.log(paths)
  return paths;
};

const { word } = Astro.params;
const currentPath = Astro.url.pathname;
const splitPaths=currentPath.split("/")
const wordURL= new URL(`${import.meta.env.STRAPI_URL}/api/slugify/slugs/${splitPaths[2]}/${word.toLowerCase()}`).toString()
const response = await ( await fetch(wordURL)).json();
let wordInfo=null
if(response.data && "attributes" in response.data){ 

  wordInfo={...response.data.attributes} 
}
// else{
//   wordInfo={
//     meanging:"not found",
//     Example:"not found"

//   }
// }
//console.log(`wordInfo: ${wordInfo}`)

---
<BaseHTML>
  <title>{word}</title>
  <Main>
  <p>Current path: <span>{currentPath}</span></p>
  <p>Endpoint: <span>{wordURL}</span></p>
  {wordInfo &&
  
    <h1>{word}</h1>
    <p>Meaning: <span>{wordInfo.meaning}</span></p>
    <p>Example: <span>{wordInfo.Example}</span></p>
  }
  
  
  </Main>
</BaseHTML>
