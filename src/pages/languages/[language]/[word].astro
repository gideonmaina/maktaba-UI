---
import BaseHTML from '../../../layouts/BaseHTML.astro';
import MetaTag from '../../../components/MetaTag.astro';
import Main from "../../../layouts/Main.astro"
import { Debug } from 'astro:components';
export const getStaticPaths = async () => {
  //  console.log(url)
  // let routes=[];
  let paths = [];

  try {
    const url = new URL(`${import.meta.env.STRAPI_URL}/api/languages`);
    const response = await fetch(url.toString());
    const result = await response.json();
    const languages = result.data;

    for (const obj of languages) {
      const language = obj.attributes.slug
        ? obj.attributes.slug
        : obj.attributes.Language;

      const url = new URL(`${import.meta.env.STRAPI_URL}/api/${language}s`);
      const response = await fetch(url.toString());
      const result = await response.json();
      
      if(result.data) {
        const words = result.data;
        //console.log(words)
        for await (const obj of words) {
          // wait for loop to finish
          // console.error("Word object")
          //  console.log(obj)
          if(obj.attributes) {
            const endpoint = {
              params: { language: "", word: "" },
            };
            const word = obj.attributes.word;
            // console.log(word)
            endpoint.params.language = language;
            endpoint.params.word = word;
            //console.log(endpoint)
            paths.push({ ...endpoint });
          }
        }
      }
    }
  } catch (error) {
    console.log(error.message);
  }
  //console.log(paths)
  return paths;
};

const { word } = Astro.params;
const currentPath = Astro.url.pathname;
const splitPaths=currentPath.split("/")
const wordURL= new URL(`${import.meta.env.STRAPI_URL}/api/slugify/slugs/${splitPaths[2]}/${word.toLowerCase()}?populate=*`).toString()
const response = await ( await fetch(wordURL)).json();
let wordInfo=null
let metanames={
  description:"",
  created:"",
  updated:""
}
if(response.data && "attributes" in response.data){ 

  wordInfo={...response.data.attributes} 
  metanames.description=wordInfo.direct_translation,
  metanames.created=wordInfo.createdAt,
  metanames.updated=wordInfo.updatedAt

}
// else{
//   wordInfo={
//     meanging:"not found",
//     Example:"not found"

//   }
// }
// console.log(`wordInfo: ${wordInfo}`)
//console.log(response.data)

const canonicalURL = Astro.url;
console.log(canonicalURL)





---



<BaseHTML>
  <!-- Import MetaTag compent and insert it to head slot of base layout -->

  <MetaTag metas_of_type_name={metanames} slot="head"/>
  
 <title slot="title">{word}</title>
  <Debug>
  {canonicalURL}
  </Debug>
    
  <Main>
    <!-- <p>Current path: <span>{currentPath}</span></p>
    <p>Endpoint: <span>{wordURL}</span></p> -->
    {wordInfo && // Only display word information if response data is not null
    <div class="word-container">

    <!-- ToDo: Prioritize using Kikuku schema -->
    <h1 class="word-title">{word}</h1>
    
    <div>
      <h2>Meaning:</h2> <p>{wordInfo.meaning?wordInfo.meaning:wordInfo.direct_translation}</p>
    </div>
    <div>
      <h2>Example:</h2> <p>{wordInfo.Example?wordInfo.Example:wordInfo.sentence_examples[0].example_in_sentence}</p>
    </div>
    <h2>Definition(s):</h2>
    <ol>
      {
    wordInfo.definition.map(def=>(
      
     <li>
        <span>{def.definition_in_english}</span>
        <span><sup> {def.part_of_speech}</sup></sp>
      </li>
      ))
  }
    </ol>
    <h2>Example(s):</h2>
    <ol>
      {
    wordInfo.sentence_examples.map(example=>(
      
     <li>
        <p>{example.example_in_sentence}</p>
        <p class="translation">Translation: {example.english_translation}</p>
      </li>
      ))
  }
    </ol>
  

    <div>
      <h2><em>Plural:</em></h2><p>{wordInfo.plural}</p>
      </div>
      <div>
        <h2><em>Synonyms</em></h2>
        {
          wordInfo.synonyms.map(synonym=>(<p>{synonym}</p>))
        
        }
      </div>
    </div>
  
  
  </Main>
</BaseHTML>

<style lang="scss">
  .word-container{
    box-shadow: 12px 10px 55px -8px rgba(0,0,0,0.3);
    padding:1rem;
    display:flex;
    flex-direction:column;
    gap:0.5rem;
   
    div{
      display:flex;
      gap:0.75rem;
    }
   
    h2{
      font-size:medium;
      font-weight: normal;  
    }
    
    ol{
      list-style: display;
      margin-left: 2rem;
      li{
        p{
          margin-top:5px;
        }
      }
  }

  .translation{
    font-style: italic;
    font-size:400;
    font-weight: bold;
  }
  sup{
    color:teal;
    margin-left: 0.2rem;
  }
  }


  .word-title{
    font-family:'Playfair Display', sans-serif;
    font-weight: bolder;
    font-size:48px;
  }

</style>